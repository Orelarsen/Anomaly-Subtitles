-- Speaker Icon npc:character_icon
-- Speaker Faction Icon get_story_story_info(faction_expansions.faction[npc:character_community()]["leader"]).icon
-- Subtitle Background

--Imports
get_config = subtitles_mcm.get_config
get_keytable = subtitles_utils.get_keytable
mcm_options = subtitles_mcm.defaults
extract_str = subtitles_utils.extract_str
isnumber = subtitles_utils.isnumber
print_table = subtitles_utils.print_table
contains = subtitles_utils.contains

--Constants
settings = {}
HUD = nil
mcm_prefix = {"bc_", "fc_", "fk_", "fa_"}

-- Tables
fonts = {
    ["small"] =   GetFontSmall(),
    ["med"] =     GetFontMedium(),
    ["di"] =      GetFontDI(),
    ["let16"] =   GetFontLetterica16Russian(),
    ["let18"] =   GetFontLetterica18Russian(),
    ["graff19"] = GetFontGraffiti19Russian(),
    ["graff22"] = GetFontGraffiti22Russian()  
}

clr_table = {
    -- Additional Colours
    ["black"]       = function(opacity) return GetARGB(opacity, 0, 0, 0) end,
    ["blue"]        = function(opacity) return GetARGB(opacity, 34, 106, 226) end,
    ["magenta"]     = function(opacity) return GetARGB(opacity, 209, 74, 169) end,

    -- Base Game Colours
	["white"]       = function(opacity) return GetARGB(opacity,255,255,255) end,
	["green"]       = function(opacity) return GetARGB(opacity,0,255,0) end,
	["yellow"]      = function(opacity) return GetARGB(opacity,255,255,0) end,
	["red"]         = function(opacity) return GetARGB(opacity,255,0,0) end,
	["orange"]      = function(opacity) return GetARGB(opacity,250,150,0) end,
	["d_orange"]    = function(opacity) return GetARGB(opacity,238,153,26) end,
	["d_red"]       = function(opacity) return GetARGB(opacity,204,0,51) end,
	["d_cyan"]      = function(opacity) return GetARGB(opacity,153,255,255) end,
	["d_purple"]    = function(opacity) return GetARGB(opacity,93,0,116) end,
	["d_green"]     = function(opacity) return GetARGB(opacity,51,255,102) end,
	["d_blue"]      = function(opacity) return GetARGB(opacity,100,100,255) end,	
	["ui_gray_1"]   = function(opacity) return GetARGB(opacity,170,170,170) end,
	["ui_gray_2"]   = function(opacity) return GetARGB(opacity,140,140,140) end,
	["pda_green"]   = function(opacity) return GetARGB(opacity,56,209,115) end,
	["pda_blue"]    = function(opacity) return GetARGB(opacity,56,166,209) end,
	["pda_yellow"]  = function(opacity) return GetARGB(opacity,209,209,56) end,
	["pda_white"]   = function(opacity) return GetARGB(opacity,250,250,250) end,
}

faction_to_colour = {
    ["stalker"]     = function(opacity) return GetARGB(opacity, 241, 196, 15) end,
    ["csky"]        = function(opacity) return GetARGB(opacity, 0, 191, 255) end,
    ["bandit"]      = function(opacity) return GetARGB(opacity, 194, 125, 14) end,
    ["army"]        = function(opacity) return GetARGB(opacity, 118, 139, 5) end,
    ["killer"]      = function(opacity) return GetARGB(opacity, 61, 104, 145) end,
    ["monolith"]    = function(opacity) return GetARGB(opacity, 33, 148, 150) end,
    ["ecolog"]      = function(opacity) return GetARGB(opacity, 122, 199, 184)end,
    ["dolg"]        = function(opacity) return GetARGB(opacity, 178, 34, 34) end,
    ["freedom"]     = function(opacity) return GetARGB(opacity, 34, 139, 34) end,
    ["greh"]        = function(opacity) return GetARGB(opacity, 14, 1, 1) end,
    ["renegade"]    = function(opacity) return GetARGB(opacity, 168, 67, 0) end,
    ["isg"]         = function(opacity) return GetARGB(opacity, 184, 102, 135) end,
    ["default"]     = function(opacity) return GetARGB(opacity, 0, 0, 0) end
}

spendecial_character_faction = {
    ["Barkeep"] = "stalker",
    ["Snitch"] = "stalker"
}

align = {
    ["l"] = "left",
    ["r"] = "right",
    ["c"] = "center"
}

-- Common Functions
function pr(str, ...)
	subtitles_utils.dbg_pr("Subtitles| HUD: %s", str, ...)
end

function colours(key, opacity)
    return clr_table[key](opacity)
end

function alignment(key, get_char)
    if get_char and #key == 1 then return key end
    return align[key]
end

function parse_accessibility_option(key, opacity)
    local mcm_option = get_config(key)
    if isnumber(mcm_option) then pr("Getting %s option: %s", key, mcm_option) return tostring(mcm_option) end

    pr("Parsing acessibility option %s", mcm_option)
    local option = false
    for _, prefix in pairs(mcm_prefix) do
        option = extract_str(mcm_option, prefix)
        pr("Extracted String: %s", option)

        if option ~= false then
            pr("Getting %s option: %s", key, option)

            if contains(align, option, true) then
                pr("Getting alignment option")           
                return alignment(option, true)

            elseif contains(fonts, option, true) then
                pr("Getting fonts option")           
                return fonts[option]

            elseif contains(clr_table, option, true) then
                pr("Getting colour option")           
                return colours(option, opacity)
            end
        end
    end    
    return option
end

-- HUD Control Functions

function activate_subtitles(info)
    if HUD ~= nil or not get_config("enable_subs") then return end
    pr("Displaying Subtitles HUD")
    HUD = SUBUI(info)
    get_hud():AddDialogToRender(HUD)
    HUD:display_subtitles()
end

function deactivate_subtitles()
    if HUD == nil then return end
    pr("Removing Subtitles HUD")
    get_hud():RemoveDialogToRender(HUD)
    HUD:Reset()
    HUD = nil
end

-- Subtitle HUD Class

class "SUBUI" (CUIScriptWnd)
function SUBUI:__init(info) super()
    pr("Intialising HUD")
    self:SetAutoDelete(true)
    pr("Assigning Subtitle Info")
    self.speaker = info["speaker_name"]
    self.speaker_icon = info["speaker_icon"]
    self.speaker_faction = info["speaker_faction"]
    self.subtitle = info["subtitle"]
    self.localisation = info["locale"]
    self.subtitle_duration = info["duration"]

    pr(print_table(info, true))
    self.xml_patches = CScriptXmlInit()
    self.xml_subs = CScriptXmlInit()
    self.xml_portraits = CScriptXmlInit()

    self.xml_patches:ParseFile("ui_patches.xml")
    self.xml_subs:ParseFile("ui_subtitles_elements.xml")
    self.xml_portraits:ParseFile("ui_actor_portraits.xml")

    pr("Building Speaker UI")
    self.subtitle_background = self.xml_subs:InitStatic("background", self)
    self.subtitle_speaker_icon = self.xml_portraits:InitStatic(self.speaker_icon, self.subtitle_background)
    self.subtitle_speaker_name = self.xml_subs:InitTextWnd("sub_speaker_name", self.subtitle_background)
    self.subtitle_text = self.xml_subs:InitTextWnd("sub_text", self.subtitle_background)

    -- From Crook's Faction Identification UI (xml reference altered)
    self.factions = {}
    self.factions["stalker"] 	= self.xml_patches:InitStatic("patch_stalker", self.subtitle_speaker_icon)
	self.factions["bandit"] 	= self.xml_patches:InitStatic("patch_bandit", self.subtitle_speaker_icon)
	self.factions["csky"] 		= self.xml_patches:InitStatic("patch_csky", self.subtitle_speaker_icon)
	self.factions["army"] 		= self.xml_patches:InitStatic("patch_army", self.subtitle_speaker_icon)
	self.factions["freedom"] 	= self.xml_patches:InitStatic("patch_freedom", self.subtitle_speaker_icon)
	self.factions["dolg"] 		= self.xml_patches:InitStatic("patch_dolg", self.subtitle_speaker_icon)
	self.factions["ecolog"] 	= self.xml_patches:InitStatic("patch_ecolog", self.subtitle_speaker_icon)
	self.factions["killer"] 	= self.xml_patches:InitStatic("patch_killer", self.subtitle_speaker_icon)
	self.factions["monolith"] 	= self.xml_patches:InitStatic("patch_monolith", self.subtitle_speaker_icon)
	self.factions["greh"] 		= self.xml_patches:InitStatic("patch_greh", self.subtitle_speaker_icon)
	self.factions["renegade"]	= self.xml_patches:InitStatic("patch_renegade", self.subtitle_speaker_icon)
	self.factions["isg"] 		= self.xml_patches:InitStatic("patch_isg", self.subtitle_speaker_icon)
	self.factions["unknown"] 	= self.xml_patches:InitStatic("patch_unknown", self.subtitle_speaker_icon)
	
    
    self.subtitle_faction = self.factions[self.speaker_faction] or self.factions[special_character_faction[self.speaker_name]] or self.factions["unknown"]
    
    pr("Setting UI to invisible")
    self.factions["stalker"]:Show(false)
    self.factions["bandit"]:Show(false)
    self.factions["csky"]:Show(false) 	
    self.factions["army"]:Show(false) 	
    self.factions["freedom"]:Show(false) 
    self.factions["dolg"]:Show(false) 	
    self.factions["ecolog"]:Show(false) 
    self.factions["killer"]:Show(false) 
    self.factions["monolith"]:Show(false) 
    self.factions["greh"]:Show(false) 	
    self.factions["renegade"]:Show(false)
    self.factions["isg"]:Show(false) 	
    self.factions["unknown"]:Show(false) 
        
    self.subtitle_speaker_icon:Show(false)
    self.subtitle_speaker_name:Show(false)
    self.subtitle_faction:Show(false)
    self.subtitle_background:Show(false)
    self.subtitle_text:Show(false)
end

function SUBUI:__finalize()
end

function SUBUI:Reset()
    pr("Reseting UI")
    self.factions["stalker"]:Show(false)
    self.factions["bandit"]:Show(false)
    self.factions["csky"]:Show(false) 	
    self.factions["army"]:Show(false) 	
    self.factions["freedom"]:Show(false) 
    self.factions["dolg"]:Show(false) 	
    self.factions["ecolog"]:Show(false) 
    self.factions["killer"]:Show(false) 
    self.factions["monolith"]:Show(false) 
    self.factions["greh"]:Show(false) 	
    self.factions["renegade"]:Show(false)
    self.factions["isg"]:Show(false) 	
    self.factions["unknown"]:Show(false) 
        
    self.subtitle_speaker_icon:Show(false)
    self.subtitle_speaker_name:SetText(false)
    self.subtitle_faction:Show(false)
    self.subtitle_background:Show(false)
    self.subtitle_text:SetText(false)
end

function SUBUI:display_subtitles()
    pr("Building Subtitles")
   

    --[[
    local sb_pos =  self.subtitle_background:GetWndPos()
    local spi_pos = self.subtitle_speaker_icon:GetWndPos()
    local sf_pos_x = spi_pos.x - (spi_pos.x * 0.25)
    local sf_pos_y = spi_pos.y - (spi_pos.y * 0.25)
    local spi_size = {["h"]=self.subtitle_speaker_icon:GetHeight(),["w"]=self.subtitle_speaker_icon:GetWidth()}
    local spi_size_w = spi_size.w * 0.25
    local spi_size_h = spi_size.h * 0.25
    local sb_size = {["h"]=self.subtitle_background:GetHeight(),["w"]=self.subtitle_background:GetWidth()}


    self.subtitle_text_frame:SetWndPos(vector2():set(sb_pos.x + 110, sb_pos.y))
    self.subtitle_speaker_icon:SetWndPos(vector2():set(sb_pos.x, sb_pos.y))
    self.subtitle_faction:SetWndPos(vector2():set(sf_pos_x, sf_pos_y))
    self.subtitle_speaker_name:SetWndPos(vector2:set(spi_pos.x, spi_size.y - 10))
    self.subtitle_text:SetWndPos(vector2:set(spi_pos.x + 10, spi_size.y))

    self.subtitle_text_frame:SetWndSize(vector2():set(sb_size.w - 10, sb_size.h - 10))
    self.subtitle_speaker_icon:SetWndSize(vector2():set(100, 100))
    self.subtitle_faction:SetWndSize(vector2():set(25, 25))
    self.subtitle_faction:SetWndSize(vector2():set(spi_size_w, spi_size_h))
    ]]--
    

    

    self.subtitle_background:SetStretchTexture(true)
    self.subtitle_background:SetTextureColor(BACKGROUND_COLOUR) 

    self.subtitle_speaker_name:SetTextColor(faction_to_colour[self.speaker_faction](FONT_OPACITY))
    self.subtitle_speaker_name:SetText(self.speaker)
    self.subtitle_speaker_name:SetFont(FONT_KIND)
    self.subtitle_speaker_name:SetTextAlignment(FONT_ALIGNMENT)
    
    self.subtitle_text:SetTextColor(FONT_COLOUR)
    self.subtitle_text:SetText(self.subtitle)    
    self.subtitle_text:SetFont(FONT_KIND)
    self.subtitle_text:SetTextAlignment(FONT_ALIGNMENT)

    self.subtitle_speaker_icon:Show(true and ENABLE_SPEAKER_ICON or false)
    self.subtitle_faction:Show(true and ENABLE_FACTION_ICON or false)
    self.subtitle_background:Show(true and ENABLE_BACKGROUND or false)
    self.subtitle_speaker_name:Show(true)
    self.subtitle_text:Show(true)

    if self.subtitle_duration % 1 ~= 0 then 
        self.subtitle_duration = round_idp(self.subtitle_duration, 2)
    end

    CreateTimeEvent("subtitles_ui_"..math.random(1,10000), "subtitle_duration_"..math.random(1,10000), self.subtitle_duration, function()
        pr("Closing Subtitles")
        deactivate_subtitles()
        return true
    end)
end

-- MCM Settings

function on_option_change()
    ENABLE_BACKGROUND = get_config("enable_background")
    ENABLE_SPEAKER_ICON = get_config("enable_speaker_icon")
    ENABLE_FACTION_ICON = get_config("enable_faction_icon")

    BACKGROUND_OPACITY = parse_accessibility_option("background_opacity")
    BACKGROUND_COLOUR = parse_accessibility_option("background_colour", BACKGROUND_OPACITY) 
    
    FONT_OPACITY = parse_accessibility_option("font_opacity")
    FONT_COLOUR = parse_accessibility_option("font_colour", FONT_OPACITY)
    FONT_KIND = parse_accessibility_option("font_kind")
    FONT_ALIGNMENT = parse_accessibility_option("font_alignment")
end

-- Callbacks

function on_game_start()
	RegisterScriptCallback("actor_on_net_destroy", deactivate_subtitles)
    RegisterScriptCallback("on_option_change", on_option_change)
    on_option_change()
end


    
    

